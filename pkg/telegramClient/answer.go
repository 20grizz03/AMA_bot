package main

import (
	"fmt"
	"net/url"
	"strconv"
)

// –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
type WeatherAnswer struct {
	City          string  `json:"city"`
	Temperature   int     `json:"temperature"`
	Precipitation string  `json:"precipitation"`
	Humidity      int     `json:"humidity"`
	Wind          float64 `json:"wind"`
}

// —Å–æ–∑–¥–∞–¥–∏–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
var Weather = WeatherAnswer{
	City:          "–ú–æ—Å–∫–≤–∞",
	Temperature:   25,
	Precipitation: "–Ø—Å–Ω–æ",
	Humidity:      60,
	Wind:          5.5,
}

// –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç WEATHER API. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
func parseWeatherAnswer(weather WeatherAnswer) string {
	// –ø–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–º –ø–æ–ª—É—á–∏–º –æ—Ç WEATHER API –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	return fmt.Sprintf(
		"üèô –ì–æ—Ä–æ–¥: %s\nüå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %d¬∞C\n‚òÄ –û—Å–∞–¥–∫–∏: %s\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%\nüí® –í–µ—Ç–µ—Ä: %.2f –º/—Å",
		weather.City, weather.Temperature, weather.Precipitation, weather.Humidity, weather.Wind,
	)
}

// –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–∞
func (c *Client) SendMessage(chatID int, text string) error {
	q := url.Values{}
	q.Add("chat_id", strconv.Itoa(chatID))
	q.Add("text", text)

	_, err := c.doRequest("sendMessage", q)

	if err != nil {
		return fmt.Errorf("can't do request: %v", err)
	}
	return nil
}

// –ì–æ–ª–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
func answerForUser(client *Client, chatID int64, weather WeatherAnswer) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
	message := parseWeatherAnswer(weather)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	err := client.SendMessage(int(chatID), message)
	if err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v\n", err)
	}
}
